<!DOCTYPE html>
<html lang="ur">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ایوی ایٹر سگنل پیشنگو</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Montserrat", sans-serif;
        background-color: #121212;
        color: white;
        text-align: center;
        margin: 0;
        padding: 20px;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      body.modal-open {
        overflow: hidden;
      }

      .game-container {
        max-width: 600px;
        width: 100%;
        margin: 0 auto;
        background-color: #1e1e1e;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        transform: translateY(0);
        transition: transform 0.3s ease;
        position: relative;
      }

      .game-container:hover {
        transform: translateY(-5px);
      }

      h1 {
        color: #ffcc00;
        margin-bottom: 10px;
        font-weight: 600;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
      }

      .aviator-display {
        height: 200px;
        background-color: #2a2a2a;
        border-radius: 10px;
        margin: 25px 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
        overflow: hidden;
      }

      .multiplier {
        font-size: 47px;
        font-weight: 600;
        color: #00cc66;
        margin-bottom: 20px;
        text-shadow: 0 0 10px rgba(0, 204, 102, 0.5);
        animation: float 3s ease-in-out infinite;
      }

      .bet-amount {
        font-size: 24px;
        font-weight: 600;
        color: #ffcc00;
        margin: 15px 0;
        text-shadow: 0 0 10px rgba(255, 204, 0, 0.3);
      }

      .plane {
        font-size: 40px;
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        transition: left 0.05s linear;
      }

      .history-container {
        max-height: 90px;
        overflow-y: auto;
        margin-bottom: 25px;
        padding: 10px;
        background-color: #2a2a2a;
        border-radius: 10px;
      }

      .history {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .history-item {
        padding: 10px;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        background-color: rgba(255, 204, 0, 0.1);
        border-left: 4px solid #ffcc00;
      }

      .history-multiplier {
        font-weight: 600;
        color: #ffcc00;
      }

      .history-result {
        font-weight: 600;
      }

      .success {
        color: #00cc66;
      }

      .fail {
        color: #ff4444;
      }

      .controls {
        margin-top: 30px;
        display: flex;
        justify-content: center;
        gap: 20px;
      }

      button {
        background-color: #ffcc00;
        color: #121212;
        border: none;
        padding: 14px 30px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 16px;
        letter-spacing: 0.5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
        width: 200px;
      }

      button:hover {
        background-color: #ffdd33;
        transform: translateY(-3px);
        box-shadow: 0 7px 14px rgba(0, 0, 0, 0.2);
      }

      button:active {
        transform: translateY(1px);
      }

      button:disabled {
        background-color: #444;
        color: #777;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
      }

      button:disabled:hover::after {
        opacity: 0;
      }

      button::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          45deg,
          transparent 25%,
          rgba(255, 255, 255, 0.1) 50%,
          transparent 75%
        );
        background-size: 400% 400%;
        opacity: 0;
        transition: all 0.5s ease;
      }

      button:hover::after {
        opacity: 1;
        animation: shine 1.5s infinite;
      }

      input {
        padding: 10px 20px;
        border-radius: 8px;
        background-color: #333;
        color: white;
        border: none;
        font-size: 16px;
        cursor: text;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        width: 200px;
        text-align: center;
      }

      input:invalid {
        border: 2px solid #ff4444;
      }

      input:valid {
        border: 2px solid #00cc66;
      }

      input:hover {
        background-color: #444;
      }

      label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #ddd;
      }

      .hidden {
        display: none;
      }

      .id-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        margin-bottom: 30px;
      }

      .error-message {
        color: #ff4444;
        margin-top: 5px;
        font-size: 14px;
        height: 20px;
      }

      /* Loading overlay styles */
      .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
      }

      .loading-overlay.active {
        opacity: 1;
        visibility: visible;
      }

      .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid rgba(255, 204, 0, 0.3);
        border-radius: 50%;
        border-top-color: #ffcc00;
        animation: spin 1s ease-in-out infinite;
        margin-bottom: 20px;
      }

      .loading-text {
        color: #ffcc00;
        font-size: 18px;
        font-weight: 600;
      }

      /* How to use button */
      .how-to-use-btn {
        background-color: transparent;
        border: 2px solid #ffcc00;
        color: #ffcc00;
        margin: 0 auto 25px;
        width: 90%;
        max-width: 400px;
        white-space: nowrap;
      }

      .how-to-use-btn:hover {
        background-color: rgba(255, 204, 0, 0.1);
      }

      /* Modal styles */
      .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
      }

      .modal-overlay.active {
        opacity: 1;
        visibility: visible;
      }

      .modal-content {
        background-color: #1e1e1e;
        border-radius: 15px;
        padding: 30px;
        max-width: 500px;
        width: 90%;
        position: relative;
        transform: translateY(20px);
        transition: transform 0.3s ease;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      }

      .modal-overlay.active .modal-content {
        transform: translateY(0);
      }

      .close-modal {
        position: absolute;
        top: 15px;
        right: 15px;
        font-size: 24px;
        color: #aaa;
        cursor: pointer;
        transition: color 0.3s ease;
      }

      .close-modal:hover {
        color: #ff4444;
      }

      .modal-title {
        color: #ffcc00;
        margin-bottom: 20px;
        font-size: 22px;
      }

      .modal-text {
        text-align: left;
        line-height: 1.6;
        margin-bottom: 20px;
      }

      .modal-text ol {
        padding-left: 20px;
      }

      .modal-text li {
        margin-bottom: 15px;
      }

      .modal-text strong {
        color: #ffcc00;
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        100% {
          transform: scale(1.05);
        }
      }

      @keyframes float {
        0% {
          transform: translateY(0px);
        }
        50% {
          transform: translateY(-5px);
        }
        100% {
          transform: translateY(0px);
        }
      }

      @keyframes shine {
        0% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      /* Scrollbar styles */
      ::-webkit-scrollbar {
        width: 8px;
      }

      ::-webkit-scrollbar-track {
        background: #1e1e1e;
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb {
        background: #ffcc00;
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: #ffdd33;
      }
    </style>
  </head>
  <body>
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loading-overlay">
      <div class="loading-spinner"></div>
      <div class="loading-text">آپ کا ID تصدیق ہو رہا ہے...</div>
    </div>

    <!-- Modal Overlay -->
    <div class="modal-overlay" id="modal-overlay">
      <div class="modal-content">
        <span class="close-modal" id="close-modal">&times;</span>
        <h3 class="modal-title">بوٹ کو کیسے استعمال کریں</h3>
        <div class="modal-text">
          <ol>
            <li>
              <strong>پہلے</strong> آپ کو یہ معلوم کرنا ہوگا کہ آپ کو کتنا بیٹ لگانا ہے "بیٹ کی رقم حاصل کریں" بٹن پر کلک کر کے
            </li>
            <li>
              آپ کو <strong>ضرور</strong> پہلے دکھائی گئی رقم پر بیٹ لگانا ہوگا اور اس کے بعد ہی "سگنل حاصل کریں" بٹن پر کلک کرنا ہوگا
            </li>
          </ol>
          <p>یہی واحد طریقہ ہے جس سے آپ جیتیں گے!</p>
          <p>
            اگر آپ سگنل لیتے ہیں اور بوٹ کو چیک کرنے کے لیے بیٹ نہیں لگاتے، تو آپ کو غلط سگنل ملے گا کیونکہ بوٹ 1xBet سائٹ پر آپ کے بیٹ کو نہیں دیکھ سکتا اور جیتنے والے سگنل کا تجزیہ نہیں کر سکتا۔
          </p>
          <p>
            اگر آپ ہار جاتے ہیں، تو اس کا مطلب ہے کہ آپ کچھ غلط کر رہے ہیں۔ یا اگر آپ کو یقین ہے کہ آپ سب کچھ صحیح کر رہے ہیں، تو اپنا براؤزر تبدیل کریں یا VPN کے ساتھ کھیلیں۔
          </p>
        </div>
      </div>
    </div>

    <div class="game-container">
      <h1>ایوی ایٹر سگنل پیشنگو</h1>
      <button class="how-to-use-btn" id="how-to-use-btn">بوٹ کو کیسے استعمال کریں</button>

      <div class="id-form" id="id-form">
        <div class="setting-group">
          <label for="user-id">اپنا 1XBET اکاؤنٹ ID درج کریں</label>
          <input
            type="text"
            id="user-id"
            pattern="\d{8,}"
            inputmode="numeric"
            placeholder="آپ کا 1xBet اکاؤنٹ ID"
            required
            title="براہ کرم کم از کم 8 ہندسے درج کریں"
          />
          <div class="error-message" id="error-message"></div>
        </div>
        <button id="verify-btn">ID تصدیق کریں</button>
      </div>

      <div id="game-content" class="hidden">
        <div class="aviator-display">
          <div class="multiplier" id="multiplier">اپنا سگنل حاصل کریں</div>
        </div>

        <div class="bet-amount hidden" id="bet-amount-container">
          آپ کی بیٹ کی رقم: <span id="bet-amount">0</span> PKR
        </div>

        <div class="history-container">
          <div class="history" id="history">
            <!-- تاریخ کے آئٹمز یہاں شامل کیے جائیں گے -->
          </div>
        </div>

        <div class="controls">
          <button id="get-bet-btn" onclick="getBetAmount()">
            بیٹ کی رقم حاصل کریں
          </button>
          <button id="predict-btn" onclick="getPrediction()" disabled>
            سگنل حاصل کریں
          </button>
        </div>
      </div>
    </div>

    <script>
      // DOM elements
      const idForm = document.getElementById("id-form");
      const gameContent = document.getElementById("game-content");
      const userIdInput = document.getElementById("user-id");
      const verifyBtn = document.getElementById("verify-btn");
      const errorMessage = document.getElementById("error-message");
      const multiplierElement = document.getElementById("multiplier");
      const betAmountContainer = document.getElementById(
        "bet-amount-container"
      );
      const betAmountElement = document.getElementById("bet-amount");
      const historyElement = document.getElementById("history");
      const predictButton = document.getElementById("predict-btn");
      const getBetButton = document.getElementById("get-bet-btn");
      const loadingOverlay = document.getElementById("loading-overlay");
      const howToUseBtn = document.getElementById("how-to-use-btn");
      const modalOverlay = document.getElementById("modal-overlay");
      const closeModal = document.getElementById("close-modal");

      // Game state
      const gameState = {
        userId: null,
        currentMultiplier: 0,
        predictionMultiplier: 0,
        crashMultiplier: 0,
        betAmount: 0,
        history: [],
        isRunning: false,
        fixedPrediction: null,
        fixedCrash: null,
        betGenerated: false,
      };

      // Verify ID button handler
      verifyBtn.addEventListener("click", () => {
        // Validate input
        if (userIdInput.validity.valid) {
          // Show loading overlay
          loadingOverlay.classList.add("active");

          // Simulate verification for 4 seconds
          setTimeout(() => {
            gameState.userId = userIdInput.value;
            loadingOverlay.classList.remove("active");
            idForm.remove(); // Remove the ID verification section completely
            gameContent.classList.remove("hidden");
            errorMessage.textContent = "";
          }, 4000);
        } else {
          if (userIdInput.value.length < 8) {
            errorMessage.textContent = "ID کم از کم 8 ہندسوں پر مشتمل ہونا چاہیے";
          } else if (!/^\d+$/.test(userIdInput.value)) {
            errorMessage.textContent = "ID میں صرف نمبرز ہونے چاہئیں";
          } else {
            errorMessage.textContent = "غلط ID فارمیٹ";
          }
        }
      });

      // How to use button handler
      howToUseBtn.addEventListener("click", () => {
        document.body.classList.add("modal-open");
        modalOverlay.classList.add("active");
      });

      // Close modal handlers
      closeModal.addEventListener("click", () => {
        document.body.classList.remove("modal-open");
        modalOverlay.classList.remove("active");
      });

      modalOverlay.addEventListener("click", (e) => {
        if (e.target === modalOverlay) {
          document.body.classList.remove("modal-open");
          modalOverlay.classList.remove("active");
        }
      });

      // Force numeric input
      userIdInput.addEventListener("input", function () {
        this.value = this.value.replace(/\D/g, "");
        errorMessage.textContent = "";
      });

      // Generate bet amount
      function getBetAmount() {
        if (gameState.isRunning) return;

        // Disable button during generation
        getBetButton.disabled = true;
        getBetButton.textContent = "تخلیق ہو رہا ہے...";

        // Show loading state for 3 seconds
        setTimeout(() => {
          // Generate random bet amount between 300 and 500 PKR
          const min = 300;
          const max = 500;
          const randomAmount =
            Math.floor(Math.random() * (max - min + 1)) + min;

          gameState.betAmount = randomAmount;

          // Display the bet amount
          betAmountElement.textContent = gameState.betAmount;
          betAmountContainer.classList.remove("hidden");

          // Enable signal button and reset bet button
          predictButton.disabled = false;
          getBetButton.textContent = "بیٹ کی رقم حاصل کریں";
          getBetButton.disabled = false;

          gameState.betGenerated = true;
        }, 1000);
      }

      // Generate new prediction with faster animation
      function getPrediction() {
        if (gameState.isRunning || !gameState.betGenerated) return;

        // Disable buttons during animation
        predictButton.disabled = true;
        getBetButton.disabled = true;
        predictButton.textContent = "AI تجزیہ کر رہا ہے...";
        multiplierElement.textContent = "1.00";
        multiplierElement.style.color = "#00cc66";

        // Generate random crash multiplier (1.50x to 10.00x)
        const crashMultiplier =
          gameState.fixedCrash || (1.5 + Math.random() * 8.5).toFixed(2);
        gameState.crashMultiplier = crashMultiplier;

        // Generate prediction (slightly before crash)
        const predictionMultiplier =
          gameState.fixedPrediction ||
          Math.max(
            1.2,
            (crashMultiplier - 0.5 - Math.random() * 0.7).toFixed(2)
          );
        gameState.predictionMultiplier = predictionMultiplier;

        // Start animation
        gameState.isRunning = true;
        let currentPos = 0;
        const crashPos = ((crashMultiplier - 1) / 9) * 100; // Convert 1-10 to 0-100%
        const predictPos = ((predictionMultiplier - 1) / 9) * 100;

        // Faster animation interval (50ms instead of 100ms)
        const interval = setInterval(() => {
          currentPos += 1.5; // Increased speed

          // Update multiplier display
          const currentMultiplier = (1 + (currentPos / 100) * 9).toFixed(2);
          multiplierElement.textContent = currentMultiplier + " x";

          // Highlight when reach prediction point
          if (currentPos >= predictPos) {
            multiplierElement.style.color = "#ffcc00";
          }

          // Check for crash
          if (currentPos >= crashPos) {
            clearInterval(interval);
            gameState.isRunning = false;
            multiplierElement.textContent = predictionMultiplier + " x";
            multiplierElement.style.color = "#00cc66";

            // Add to history (all results saved)
            addToHistory(predictionMultiplier, crashMultiplier);

            // Reset for next round
            setTimeout(() => {
              predictButton.disabled = true;
              predictButton.textContent = "سگنل حاصل کریں";
              getBetButton.disabled = false;
              betAmountContainer.classList.add("hidden");
              gameState.betGenerated = false;
            }, 1000);
          }
        }, 50); // Faster interval
      }

      // Add result to history (all results saved)
      function addToHistory(prediction, crash) {
        const success = parseFloat(crash) >= parseFloat(prediction);
        const historyItem = document.createElement("div");
        historyItem.className = "history-item";

        historyItem.innerHTML = `
          <span class="history-multiplier">${prediction}x</span>
          <span class="history-result ${success ? "success" : "fail"}">
            ${success ? "کیش آؤٹ" : ""}
          </span>
        `;

        // Add to beginning
        historyElement.insertBefore(historyItem, historyElement.firstChild);
      }

      // Function to set fixed prediction (available in console)
      window.setFixedPrediction = function (prediction, crash) {
        if (typeof prediction !== "number" || typeof crash !== "number") {
          console.error("دونوں پیشنگوئی اور کریش نمبرز ہونے چاہئیں");
          return;
        }

        if (crash <= prediction) {
          console.error("کریش ویلیو پیشنگوئی ویلیو سے زیادہ ہونی چاہیے");
          return;
        }

        gameState.fixedPrediction = prediction.toFixed(2);
        gameState.fixedCrash = crash.toFixed(2);

        console.log(
          `فکسڈ پیشنگوئی سیٹ: ${gameState.fixedPrediction}x پر سگنل، ${gameState.fixedCrash}x پر کریش`
        );
      };

      // Function to reset fixed prediction (available in console)
      window.resetPrediction = function () {
        gameState.fixedPrediction = null;
        gameState.fixedCrash = null;
        console.log("فکسڈ پیشنگوئی ری سیٹ - رینڈم موڈ میں واپس");
      };
    </script>
  </body>
</html>
